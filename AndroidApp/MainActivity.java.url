package seniordesign.lucknell.com.seniordesign;

import android.Manifest;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.graphics.Color;
import android.os.Handler;
import android.os.PowerManager;
import android.support.annotation.RequiresApi;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Set;
import java.util.UUID;

import seniordesign.lucknell.com.seniordesign.R;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;

import com.jjoe64.graphview.GraphView;
import com.jjoe64.graphview.LegendRenderer;
import com.jjoe64.graphview.series.DataPoint;
import com.jjoe64.graphview.series.LineGraphSeries;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "bluetoothmodule2"; // for logging purposes

    Button btnOn, btnOff, bluetooth_connect_btn;
    Switch charging;

    private BluetoothAdapter btAdapter = null;
    private BluetoothSocket btSocket = null;
    private BluetoothDevice device;
    private OutputStream mmOutputStream;
    private InputStream mmInputStream;
    private TextView myLabel;
    private Thread workerThread, thread;
    private volatile boolean stopWorker;
    private boolean success = false, connected;
    private byte[] readBuffer;
    private int readBufferPosition,counter = 0, graphSize = 0;
    private double x, y, y2, y3;
    private Runnable rgraph;
    private Handler hgraph = new Handler(), blueHandler;
    private ArrayList<String> graphdata = new ArrayList<String>();
    private GraphView graph;
    private LineGraphSeries<DataPoint> series = new LineGraphSeries<DataPoint>();
    private LineGraphSeries<DataPoint> series2 = new LineGraphSeries<DataPoint>();
    private LineGraphSeries<DataPoint> series3 = new LineGraphSeries<DataPoint>();

    private static final UUID MY_UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");

    // MAC-address of Bluetooth module
    private static String address = "00:18:EF:00:1F:00";


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        getSupportActionBar().hide();
        setContentView(R.layout.activity_main);
        btnOn = findViewById(R.id.btnOn);
        btnOff = findViewById(R.id.btnOff);
        bluetooth_connect_btn = findViewById(R.id.connect_btn);
        myLabel = findViewById(R.id.txtArduino);
        charging = findViewById(R.id.switch1);
        graph = (GraphView) findViewById(R.id.graph);
        makeGraph();
        counter++;

        btAdapter = BluetoothAdapter.getDefaultAdapter();
        checkBTState();
        chargingState();
        btnOn.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                //sendData("1");
                if (success) {
                    beginListenForData();
                    Toast.makeText(getBaseContext(), "Checking for data...", Toast.LENGTH_SHORT).show();
                } else
                    Toast.makeText(getBaseContext(), "Please connect first.", Toast.LENGTH_SHORT).show();
            }
        });

        btnOff.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                rgraph = new Runnable() {
                    @Override
                    public void run() {
                        generateData();
                        hgraph.postDelayed(this, 300);
                    }
                };
                hgraph.postDelayed(rgraph, 300);
                Toast.makeText(getBaseContext(), "Graph generated. Hopefully...", Toast.LENGTH_SHORT).show();
            }
        });

        bluetooth_connect_btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (BTinit()) {
                    bluetooth_connect_btn.setText("Connecting...");
                    bluetooth_connect_btn.setEnabled(false);
                    BTconnect();
                    bluetooth_connect_btn.setEnabled(true);
                }
            }
        });
    }

    @Override
    public void onResume() {
        super.onResume();
        Log.d(TAG, "...onResume - try connect...");
        // Set up a pointer to the remote node using it's address.
        BluetoothDevice device = btAdapter.getRemoteDevice(address);
        // Two things are needed to make a connection:
        //   A MAC address, which we got above.
        //   A Service ID or UUID.  In this case we are using the
        //     UUID for SPP.
        if (BTinit() && success) {
            try {
                btSocket = createBluetoothSocket(device);
            } catch (IOException e1) {
                errorExit("Fatal Error", "In onResume() and socket create failed: " + e1.getMessage() + ".");
            }
            // Discovery is resource intensive.  Make sure it isn't going on
            // when you attempt to connect and pass your message.
            btAdapter.cancelDiscovery();

            // Establish the connection.  This will block until it connects.
            Log.d(TAG, "...Connecting...");
            try {
                btSocket.connect();
                Log.d(TAG, "...Connection ok...");
            } catch (IOException e) {
                try {
                    btSocket.close();
                } catch (IOException e2) {
                    errorExit("Fatal Error", "In onResume() and unable to close socket during connection failure" + e2.getMessage() + ".");
                }
            }
            // Create a data stream so we can talk to server.
            Log.d(TAG, "...Create Socket...");

            try {
                mmOutputStream = btSocket.getOutputStream();
            } catch (IOException e) {
                errorExit("Fatal Error", "In onResume() and output stream creation failed:" + e.getMessage() + ".");
            }
        }
    }

    @Override
    public void onPause() {
        super.onPause();

        Log.d(TAG, "...In onPause()...");
        if (BTinit() && success) {
            if (mmOutputStream != null) {
                try {
                    mmOutputStream.flush();
                } catch (IOException e) {
                    errorExit("Fatal Error", "In onPause() and failed to flush output stream: " + e.getMessage() + ".");
                }
            }

            try {
                btSocket.close();
            } catch (IOException e2) {
                errorExit("Fatal Error", "In onPause() and failed to close socket." + e2.getMessage() + ".");
            }
        }
    }

    private void chargingState() {

        final boolean stopThread = false;
        thread = new Thread(new Runnable() {
            public void run() {
                while (!thread.isInterrupted() && !stopThread) if (charging.isChecked()) {
                    sendData("W");
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                } else {
                    sendData("G");
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });
        thread.start();

    }

    private void beginListenForData() {
        final Handler handler = new Handler();
        final byte delimiter = 10; //This is the ASCII code for a newline character

        stopWorker = false;
        readBufferPosition = 0;
        readBuffer = new byte[1024];
        workerThread = new Thread(new Runnable() {
            public void run() {
                while (!Thread.currentThread().isInterrupted() && !stopWorker) {
                    try {
                        int bytesAvailable;
                        try {
                            bytesAvailable = mmInputStream.available();
                        } catch (NullPointerException ex) {
                            bytesAvailable = 0;
                        }
                        if (bytesAvailable > 0) {
                            byte[] packetBytes = new byte[bytesAvailable];
                            mmInputStream.read(packetBytes);
                            for (int i = 0; i < bytesAvailable; i++) {
                                byte b = packetBytes[i];
                                if (b == delimiter) {
                                    byte[] encodedBytes = new byte[readBufferPosition];
                                    System.arraycopy(readBuffer, 0, encodedBytes, 0, encodedBytes.length);
                                    final String data = new String(encodedBytes, "US-ASCII");
                                    final String[] dataset = data.split(",");
                                    graphdata.add(data);
                                    readBufferPosition = 0;

                                    handler.post(new Runnable() {
                                        public void run() {
                                            String display = "Connection Status:\t " + dataset[0] +
                                                    "\nVoltage:\t\t\t\t " + dataset[1] +
                                                    "\nCurrent:\t\t\t\t " + dataset[2] +
                                                    "\nmW:\t\t\t\t\t " + dataset[3];
                                            myLabel.setText(display);
                                        }
                                    });
                                } else {
                                    readBuffer[readBufferPosition++] = b;
                                }
                            }
                        }
                    } catch (IOException ex) {
                        stopWorker = true;
                    }
                }
            }
        });

        workerThread.start();
    }


    @RequiresApi(api = Build.VERSION_CODES.ECLAIR)
    public boolean BTinit() {
        boolean found = false;

        BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

        if (bluetoothAdapter == null) //Checks if the device supports bluetooth
        {
            Toast.makeText(getApplicationContext(), "Device doesn't support bluetooth", Toast.LENGTH_SHORT).show();
        }

        if (!bluetoothAdapter.isEnabled()) //Checks if bluetooth is enabled. If not, the program will ask permission from the user to enable it
        {
            Intent enableAdapter = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableAdapter, 0);

            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        Set<BluetoothDevice> bondedDevices = bluetoothAdapter.getBondedDevices();

        if (bondedDevices.isEmpty()) //Checks for paired bluetooth devices
        {
            Toast.makeText(getApplicationContext(), "Please pair the device first or enable Bluetooth", Toast.LENGTH_SHORT).show();
        } else {
            for (BluetoothDevice iterator : bondedDevices) {
                if (iterator.getAddress().equals(address)) {
                    device = iterator;
                    found = true;
                    break;
                }
            }
        }

        return found;
    }

    private void generateData() {
        graph.getLegendRenderer().setVisible(true);
        graph.getLegendRenderer().setFixedPosition(1, 1);
        graphSize += graphdata.size();
        for (int i = 0; i < graphdata.size(); i++) {
            x = x + 0.5;
            y = Double.parseDouble((graphdata.get(i).split(","))[3]);
            series.appendData(new DataPoint(x, y), true, graphSize);
            y2 = Double.parseDouble((graphdata.get(i).split(","))[2]);
            series2.appendData(new DataPoint(x, y2), true, graphSize);
            y3 = Double.parseDouble((graphdata.get(i).split(","))[1]);
            series3.appendData(new DataPoint(x, y3), true, graphSize);

        }
        graphdata.clear();
        graph.removeAllSeries();
        graph.addSeries(series);
        graph.addSeries(series2);
        graph.addSeries(series3);
        graph.getViewport().setMinX(1);
        graph.getViewport().setMaxX(x+1.5);
        graph.getViewport().setXAxisBoundsManual(true);
        graph = (GraphView) findViewById(R.id.graph);

    }

    private void makeGraph() {
        //LineGraphSeries<DataPoint> series, series2;

        graph = (GraphView) findViewById(R.id.graph);


        series.setColor(Color.RED);
        series3.setColor(Color.GREEN);
        series.setDrawDataPoints(true);
        series2.setDrawDataPoints(true);
        series3.setDrawDataPoints(true);
        series.setTitle("Milliwatt");
        series2.setTitle("Current");
        series3.setTitle("Voltage");
        graph.setTitle("Real-time Data");

        if (counter < 1) {
            x = 0.0;
        }
    }

    public boolean BTconnect() {
        connected = true;
        try {
            btSocket = device.createRfcommSocketToServiceRecord(MY_UUID); //Creates a socket to handle the outgoing connection
            btSocket.connect();
            mmInputStream = btSocket.getInputStream();
            mmOutputStream = btSocket.getOutputStream();
            success = true;
            bluetooth_connect_btn.setText("Disconnect");
            Toast.makeText(getApplicationContext(),
                    "Connection to bluetooth device successful", Toast.LENGTH_LONG).show();
        } catch (IOException e) {
            e.printStackTrace();
            connected = false;
            bluetooth_connect_btn.setText("Connect");
        }

        if (connected) {
            try {
                mmOutputStream = btSocket.getOutputStream(); //gets the output stream of the socket
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        return connected;
    }

    private BluetoothSocket createBluetoothSocket(BluetoothDevice device) throws IOException {
        if (Build.VERSION.SDK_INT >= 10) {
            try {
                final Method m = device.getClass().getMethod("createInsecureRfcommSocketToServiceRecord", new Class[]{UUID.class});
                return (BluetoothSocket) m.invoke(device, MY_UUID);
            } catch (Exception e) {
                Log.e(TAG, "Could not create Insecure RFComm Connection", e);
            }
        }
        return device.createRfcommSocketToServiceRecord(MY_UUID);
    }


    private void checkBTState() {
        // Check for Bluetooth support and then check to make sure it is turned on
        // Emulator doesn't support Bluetooth and will return null
        if (btAdapter == null) {
            errorExit("Fatal Error", "Bluetooth not support");
        } else {
            if (btAdapter.isEnabled()) {
                Log.d(TAG, "...Bluetooth ON...");
            } else {
                //Prompt user to turn on Bluetooth
                Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
                startActivityForResult(enableBtIntent, 1);
            }
        }
    }

    private void errorExit(String title, String message) {
        Toast.makeText(getBaseContext(), title + " - " + message, Toast.LENGTH_LONG).show();
        finish();
    }

    private void sendData(String message) {
        byte[] msgBuffer = message.getBytes();
        if (connected && success) {
            Log.d(TAG, "...Send data: " + message + "...");

            try {
                mmOutputStream.write(msgBuffer);
            } catch (IOException e) {
                String msg = "In onResume() and an exception occurred during write: " + e.getMessage();
               // errorExit("Fatal Error", msg);
            }
        }
    }

}
